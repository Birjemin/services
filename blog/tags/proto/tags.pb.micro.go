// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: blog/tags/proto/tags.proto

package tags

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for Tags service

func NewTagsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Tags service

type TagsService interface {
	// Increase count creates the tag or bumps the counter
	IncreaseCount(ctx context.Context, in *IncreaseCountRequest, opts ...client.CallOption) (*IncreaseCountResponse, error)
	// Decreases the counter
	DecreaseCount(ctx context.Context, in *DecreaseCountRequest, opts ...client.CallOption) (*DecreaseCountResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error)
	// Change properties of a tag, currently only the title
	Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error)
}

type tagsService struct {
	name string
}

func NewTagsService(name string) TagsService {
	return &tagsService{name: name}
}

var defaultTagsService = NewTagsService("tags")

func (c *tagsService) IncreaseCount(ctx context.Context, in *IncreaseCountRequest, opts ...client.CallOption) (*IncreaseCountResponse, error) {
	req := microClient.NewRequest(c.name, "Tags.IncreaseCount", in)
	out := new(IncreaseCountResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func TagsIncreaseCount(ctx context.Context, in *IncreaseCountRequest, opts ...client.CallOption) (*IncreaseCountResponse, error) {
	return defaultTagsService.IncreaseCount(ctx, in, opts...)
}

func (c *tagsService) DecreaseCount(ctx context.Context, in *DecreaseCountRequest, opts ...client.CallOption) (*DecreaseCountResponse, error) {
	req := microClient.NewRequest(c.name, "Tags.DecreaseCount", in)
	out := new(DecreaseCountResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func TagsDecreaseCount(ctx context.Context, in *DecreaseCountRequest, opts ...client.CallOption) (*DecreaseCountResponse, error) {
	return defaultTagsService.DecreaseCount(ctx, in, opts...)
}

func (c *tagsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	req := microClient.NewRequest(c.name, "Tags.List", in)
	out := new(ListResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func TagsList(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*ListResponse, error) {
	return defaultTagsService.List(ctx, in, opts...)
}

func (c *tagsService) Update(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	req := microClient.NewRequest(c.name, "Tags.Update", in)
	out := new(UpdateResponse)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func TagsUpdate(ctx context.Context, in *UpdateRequest, opts ...client.CallOption) (*UpdateResponse, error) {
	return defaultTagsService.Update(ctx, in, opts...)
}

// Server API for Tags service

type TagsHandler interface {
	// Increase count creates the tag or bumps the counter
	IncreaseCount(context.Context, *IncreaseCountRequest, *IncreaseCountResponse) error
	// Decreases the counter
	DecreaseCount(context.Context, *DecreaseCountRequest, *DecreaseCountResponse) error
	List(context.Context, *ListRequest, *ListResponse) error
	// Change properties of a tag, currently only the title
	Update(context.Context, *UpdateRequest, *UpdateResponse) error
}

func RegisterTagsHandler(hdlr TagsHandler, opts ...server.HandlerOption) error {
	type tags interface {
		IncreaseCount(ctx context.Context, in *IncreaseCountRequest, out *IncreaseCountResponse) error
		DecreaseCount(ctx context.Context, in *DecreaseCountRequest, out *DecreaseCountResponse) error
		List(ctx context.Context, in *ListRequest, out *ListResponse) error
		Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error
	}
	type Tags struct {
		tags
	}
	h := &tagsHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Tags{h}, opts...))
}

type tagsHandler struct {
	TagsHandler
}

func (h *tagsHandler) IncreaseCount(ctx context.Context, in *IncreaseCountRequest, out *IncreaseCountResponse) error {
	return h.TagsHandler.IncreaseCount(ctx, in, out)
}

func (h *tagsHandler) DecreaseCount(ctx context.Context, in *DecreaseCountRequest, out *DecreaseCountResponse) error {
	return h.TagsHandler.DecreaseCount(ctx, in, out)
}

func (h *tagsHandler) List(ctx context.Context, in *ListRequest, out *ListResponse) error {
	return h.TagsHandler.List(ctx, in, out)
}

func (h *tagsHandler) Update(ctx context.Context, in *UpdateRequest, out *UpdateResponse) error {
	return h.TagsHandler.Update(ctx, in, out)
}
