// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: blog/comments/proto/comments.proto

package comments

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v3/api"
	client "github.com/micro/go-micro/v3/client"
	server "github.com/micro/go-micro/v3/server"
	microClient "github.com/micro/micro/v3/service/client"
	microServer "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option
var _ = microServer.Handle
var _ = microClient.Call

// Api Endpoints for Comments service

func NewCommentsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Comments service

type CommentsService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Comments_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Comments_PingPongService, error)
}

type commentsService struct {
	name string
}

func NewCommentsService(name string) CommentsService {
	return &commentsService{name: name}
}

var defaultCommentsService = NewCommentsService("comments")

func (c *commentsService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := microClient.NewRequest(c.name, "Comments.Call", in)
	out := new(Response)
	err := microClient.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func CommentsCall(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	return defaultCommentsService.Call(ctx, in, opts...)
}

func (c *commentsService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Comments_StreamService, error) {
	req := microClient.NewRequest(c.name, "Comments.Stream", &StreamingRequest{})
	stream, err := microClient.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &commentsServiceStream{stream}, nil
}

type Comments_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type commentsServiceStream struct {
	stream client.Stream
}

func (x *commentsServiceStream) Close() error {
	return x.stream.Close()
}

func (x *commentsServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *commentsServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *commentsServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *commentsServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func CommentsStream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Comments_StreamService, error) {
	return defaultCommentsService.Stream(ctx, in, opts...)
}

func (c *commentsService) PingPong(ctx context.Context, opts ...client.CallOption) (Comments_PingPongService, error) {
	req := microClient.NewRequest(c.name, "Comments.PingPong", &Ping{})
	stream, err := microClient.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &commentsServicePingPong{stream}, nil
}

type Comments_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type commentsServicePingPong struct {
	stream client.Stream
}

func (x *commentsServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *commentsServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *commentsServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *commentsServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *commentsServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *commentsServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func CommentsPingPong(ctx context.Context, opts ...client.CallOption) (Comments_PingPongService, error) {
	return defaultCommentsService.PingPong(ctx, opts...)
}

// Server API for Comments service

type CommentsHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Comments_StreamStream) error
	PingPong(context.Context, Comments_PingPongStream) error
}

func RegisterCommentsHandler(hdlr CommentsHandler, opts ...server.HandlerOption) error {
	type comments interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Comments struct {
		comments
	}
	h := &commentsHandler{hdlr}
	return microServer.Handle(microServer.NewHandler(&Comments{h}, opts...))
}

type commentsHandler struct {
	CommentsHandler
}

func (h *commentsHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.CommentsHandler.Call(ctx, in, out)
}

func (h *commentsHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.CommentsHandler.Stream(ctx, m, &commentsStreamStream{stream})
}

type Comments_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type commentsStreamStream struct {
	stream server.Stream
}

func (x *commentsStreamStream) Close() error {
	return x.stream.Close()
}

func (x *commentsStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *commentsStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *commentsStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *commentsStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *commentsHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.CommentsHandler.PingPong(ctx, &commentsPingPongStream{stream})
}

type Comments_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type commentsPingPongStream struct {
	stream server.Stream
}

func (x *commentsPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *commentsPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *commentsPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *commentsPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *commentsPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *commentsPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
